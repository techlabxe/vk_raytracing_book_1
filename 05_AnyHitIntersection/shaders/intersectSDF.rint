#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable

#include "rtcommon.glsl"

struct HitAttribute {
  vec3 normal;
};
hitAttributeEXT HitAttribute myHitAttribute;


layout(buffer_reference, buffer_reference_align=4, scalar) buffer AABBBuffer {
    vec3 aabbs[];
};

layout(shaderRecordEXT,std430) buffer SBT {
    uint64_t indexBuffer;
    uint64_t vertexBuffer; // AABB の頂点データ列を格納しているバッファ.
};


float sdBox(vec3 p, vec3 center, vec3 extent) {
  p = p - center;
  vec3 q = abs(p) - extent;
  return length(max(q, 0.0));
}
float sdSphere(vec3 p, vec3 center, float radius) {
  p = p - center;
  return length(p) - radius;
}
float sdTorus(vec3 p, vec3 center, float radius, float width) {
  p = p - center;
  vec2 q = vec2(length(p.xz)-radius, p.y);
  return length(q) - width;
}

float CheckDistance(vec3 position) {
  float distance = 0;
  uint type = sdfGeomParams.objectType;
  vec3 objCenter = vec3(0.0);
  vec3 extent = sdfGeomParams.extent;
  float radius = sdfGeomParams.radius;
  switch(type) {
  case 0:
    distance = sdBox(position, objCenter, extent);
    break;
  case 1:
    distance = sdSphere(position, objCenter, radius);
    break;
  case 2:
    distance = sdTorus(position, objCenter, radius, 0.1);
    break;
  }
  return distance;
}
vec3 GetNormalByDistanceFunc(vec3 position) {
   float val[3] = { 0, 0, 0 };
   const float eps = 0.0001f;
   vec3 ofs[][2] = {
     { vec3(eps, 0, 0 ), vec3(-eps, 0, 0)},
     { vec3(0, eps, 0 ), vec3(0, -eps, 0)},
     { vec3(0, 0, eps ), vec3(0, 0, -eps)},
   };
   for(int i=0;i<3;++i) {
     vec3 p0 = position + ofs[i][0];
     vec3 p1 = position + ofs[i][1];
     val[i] = CheckDistance(p0) - CheckDistance(p1);
   }
   return normalize(vec3(val[0], val[1],val[2]));
}

void main() {
  uint hitKind = 0;

  float t = gl_RayTminEXT;
  const float threshold = 0.00001;
  const uint MaxSteps = 256;
  uint i = 0;

  while(i++ < MaxSteps && t <= gl_RayTmaxEXT ) {
    vec3 position = gl_ObjectRayOriginEXT + t * gl_ObjectRayDirectionEXT;
    float distance = CheckDistance(position);
    if(distance <= threshold) {
      myHitAttribute.normal = GetNormalByDistanceFunc(position);
      reportIntersectionEXT(t, hitKind);
      return;
    }
    t += distance;
  }
}