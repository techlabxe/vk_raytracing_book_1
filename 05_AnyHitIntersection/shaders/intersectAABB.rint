#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable


#include "rtcommon.glsl"

struct HitAttribute {
  vec3 normal;
};
hitAttributeEXT HitAttribute myHitAttribute;


layout(buffer_reference, buffer_reference_align=4, scalar) buffer AABBBuffer {
    vec3 aabbs[];
};

layout(shaderRecordEXT,std430) buffer SBT {
    uint64_t indexBuffer;
    uint64_t vertexBuffer; // AABB の頂点データ列を格納しているバッファ.
};

float IntersectToAABBDetail(vec3 minAABB, vec3 maxAABB) {
  vec3 origin = gl_ObjectRayOriginEXT;
  vec3 raydir = gl_ObjectRayDirectionEXT;
  vec3 invRay = 1 / raydir;

  vec3 tbot = invRay * (minAABB - origin);
  vec3 ttop = invRay * (maxAABB - origin);
  vec3 tmin = min(ttop, tbot);
  vec3 tmax = max(ttop, tbot);
  float t0 = max(tmin.x, max(tmin.y, tmin.z));
  float t1 = min(tmax.x, min(tmax.y, tmax.z));
  return t1 > max(t0, 0.0) ? t0 : -1;
}

float IntersectToSphere(vec3 center, float radius) {
  float t0, t1;
  vec3 m = gl_ObjectRayOriginEXT - center;
  vec3 d = gl_ObjectRayDirectionEXT;
  float a = dot(d, d);
  float b = 2.0 * dot(m, d);
  float c = dot(m, m) - radius * radius;
  float discr = b * b - 4 * a * c;

  if (discr < 0) {
    return -1.0;
  }
  if (discr == 0) {
    t0 = -b / (2.0 * a);
    t1 = t0;
  } else {
    float q = 0;
    if ( b > 0 ) {
      q = -b - sqrt(discr);
    } else {
      q = -b + sqrt(discr);
    }
    t0 = q / (2.0*a);
    t1 = 2.0 * c / q;
  }

  if ( t0 > t1 ) {
    float t = t0; t0 = t1; t1 = t;
  }

  // VkRayではIntersectionシェーダー内でgl_HitTEXTを使えない.
  if( t0 < gl_RayTminEXT) {
    return t1;
  }

  return min( t0, t1 );
}

vec3 ComputeNormal(uint type, vec3 minAABB, vec3 maxAABB, float t) {
  vec3 normal = vec3(0, 1, 0);
  vec3  hitPosition = gl_ObjectRayOriginEXT + t * gl_ObjectRayDirectionEXT;

  if(type == 0 ) {
    vec3 distanceToBounds[2] = {
      abs(minAABB - hitPosition),
      abs(maxAABB - hitPosition)
    };
    const float eps = 0.0001;
    if( distanceToBounds[0].x < eps ) normal = vec3(-1, 0, 0);
    else if( distanceToBounds[0].y < eps ) normal = vec3(0, -1, 0);
    else if( distanceToBounds[0].z < eps ) normal = vec3(0, 0, -1);
    else if( distanceToBounds[1].x < eps ) normal = vec3(1, 0, 0);
    else if( distanceToBounds[1].y < eps ) normal = vec3(0, 1, 0);
    else if( distanceToBounds[1].z < eps ) normal = vec3(0, 0, 1);
  } else {
    normal = normalize(hitPosition);
  }
  return normal;
}

void main() {
  float tHit = -1;
  uint hitKind = 0;
  vec3 normal = vec3(0);
  vec3 hitPosition;

  AABBBuffer aabbBuffer = AABBBuffer(vertexBuffer);

  vec3 minAABB = aabbBuffer.aabbs[0];
  vec3 maxAABB = aabbBuffer.aabbs[1];
  if(analyticGeomParams.objectType == 0 ) {
    vec3 aabb[2];
    aabb[0] = aabbBuffer.aabbs[0];
    aabb[1] = aabbBuffer.aabbs[1];
    tHit = IntersectToAABBDetail(minAABB, maxAABB);
  } else {
    vec3 center = (minAABB + maxAABB) * 0.5;
    vec3 len3 = (maxAABB - minAABB) * 0.5;
    float radius = min( len3.x, min(len3.y, len3.z));
    tHit = IntersectToSphere(center, radius);
  }

  if(tHit > 0 ) {
    myHitAttribute.normal = ComputeNormal(
        analyticGeomParams.objectType, 
        minAABB, maxAABB,
        tHit);
    reportIntersectionEXT(tHit, hitKind);
  }
}