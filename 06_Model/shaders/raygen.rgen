#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#include "rtcommon.glsl"

layout(location = 0) rayPayloadEXT MyHitPayload payload;
layout(location = 1) rayPayloadEXT MyShadowPayload shadowPayload;

#include "shootSecondRays.glsl"

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 screenPos = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = screenPos * 2.0 - 1.0;

  vec4 origin = sceneParams.mtxViewInv * vec4(0, 0, 0, 1);
  vec4 target = sceneParams.mtxProjInv * vec4(d.x, -d.y, 1, 1);
  vec4 direction = sceneParams.mtxViewInv * vec4(target.xyz, 0);
  direction.xyz = normalize(direction.xyz);

  const int colorPayloadLocation = 0;
  float tmin = 0.00;
  float tmax = 10000.0;
  uint cullMask = 0xFF;
  uint rayFlags = gl_RayFlagsNoneEXT;

  // 今回は不透明のみ,裏面はカリングして処理する.
  rayFlags |= gl_RayFlagsOpaqueEXT;
  rayFlags |= gl_RayFlagsCullBackFacingTrianglesEXT;

  payload.hitValue = vec3(0);
  payload.rayOrigin = vec3(0);
  payload.rayDirection = vec3(0);
  payload.specular = vec3(0);

  // 物体との衝突を判定して色を取得.
  traceRayEXT(
    topLevelAS,
    rayFlags, cullMask,
    0,
    1, // sbtRecordStride
    0, // missIndex
    origin.xyz, tmin, direction.xyz, tmax,
    colorPayloadLocation
  );

  vec3 color = payload.hitValue;
  vec3 specular = payload.specular;
  bool isShadow = length(payload.rayDirection) > 0;
  if( isShadow ) {
    // シャドウの計算.
    uint shadowRayFlags = gl_RayFlagsNoneEXT;
    isShadow = ShootShadowRay(payload.rayOrigin, payload.rayDirection, shadowRayFlags);
  }
  if ( isShadow ) {
    color *= 0.8;
  } else {
    color += specular;
  }
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}
